cmake_minimum_required( VERSION 3.2 ) 

if( NOT DEFINED build_type )
    set ( build_type "debug" )
endif()

if( NOT DEFINED Log_build_type )
    set( Log_build_type "${build_type}" )
endif()

if( NOT DEFINED static_libraries )
    set( build_static_libraries FALSE )
else()
    set( build_static_libraries TRUE )
endif()

project( Log VERSION 0.0.1 LANGUAGES CXX )

if( NOT DEFINED is_subproject )
    set( is_subproject )
    add_subdirectory( subprojects/catch-adapter )
    add_subdirectory( subprojects/fmt-adapter )
    add_subdirectory( subprojects/spdlog-adapter )
    unset( is_subproject )
endif()

if( NOT DEFINED is_subproject )
    if( DEFINED CXX_compiler_flags )
        if( ( NOT DEFINED Log_compiler_flags ) AND ( NOT DEFINED Log_use_default_compiler_flags ) )
            set( Log_compiler_flags "${CXX_compiler_flags}" )
        endif()
    endif()
    if( NOT DEFINED Log_compiler_flags )
        if( DEFINED no_link_time_optimization )
            set( no_link_time_optimization TRUE )
        endif()
        if( CMAKE_CXX_COMPILER_ID STREQUAL "GNU" )
            if( ${Log_build_type} STREQUAL "debug" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -std=c++14" )
            elseif( ${Log_build_type} STREQUAL "coverage" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -fprofile-arcs -ftest-coverage -std=c++14" )
            elseif( ${Log_build_type} STREQUAL "release" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -std=c++14" )
                if( NOT DEFINED no_link_time_optimization )
                    set( Log_compiler_flags "${Log_compiler_flags} -flto" )
                endif()
            elseif( ${Log_build_type} STREQUAL "native" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -march=native -std=c++14" )
                if( NOT DEFINED no_link_time_optimization )
                    set( Log_compiler_flags "${Log_compiler_flags} -flto" )
                endif()
            endif()
        elseif( CMAKE_CXX_COMPILER_ID STREQUAL "Clang" )
            if( ${Log_build_type} STREQUAL "debug" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -std=c++14" )
            elseif( ${Log_build_type} STREQUAL "coverage" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -fprofile-arcs -ftest-coverage -std=c++14" )
            elseif( ${Log_build_type} STREQUAL "release" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -std=c++14" )
                if( NOT DEFINED no_link_time_optimization )
                    set( Log_compiler_flags "${Log_compiler_flags} -flto" )
                endif()
            elseif( ${Log_build_type} STREQUAL "native" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -march=native -std=c++14" )
                if( NOT DEFINED no_link_time_optimization )
                    set( Log_compiler_flags "${Log_compiler_flags} -flto" )
                endif()
            endif()
        elseif( CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" )
            if( ${Log_build_type} STREQUAL "debug" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -std=c++14" )
            elseif( ${Log_build_type} STREQUAL "coverage" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -fprofile-arcs -ftest-coverage -std=c++14" )
            elseif( ${Log_build_type} STREQUAL "release" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -std=c++14" )
                if( NOT DEFINED no_link_time_optimization )
                    set( Log_compiler_flags "${Log_compiler_flags} -flto" )
                endif()
            elseif( ${Log_build_type} STREQUAL "native" )
                set( Log_compiler_flags "-Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -march=native -std=c++14" )
                if( NOT DEFINED no_link_time_optimization )
                    set( Log_compiler_flags "${Log_compiler_flags} -flto" )
                endif()
            endif()
        else()
            message( WARNING "Compiler vendor not recognized. No compilation flags set" )
        endif()
    endif()
    if( DEFINED appended_flags AND NOT Log_no_appended_flags )
        set( Log_compiler_flags "${Log_compiler_flags} ${appended_flags}" )
    endif()
    if( DEFINED Log_appended_flags )
        set( Log_compiler_flags "${Log_compiler_flags} ${Log_appended_flags}" )
    endif()
endif()

execute_process(
    COMMAND git rev-parse --abbrev-ref HEAD
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_BRANCH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
    COMMAND git rev-parse HEAD
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_HASH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

message( STATUS "" )
message( STATUS "-----------------------------------------------------------" )
message( STATUS "" )
message( STATUS "Log Version: 0.0.1" )
message( STATUS "Git current branch: ${GIT_BRANCH}" )
message( STATUS "Git commit hash: ${GIT_HASH}" )
message( STATUS "" )
if( NOT DEFINED is_subproject ) 
    message( STATUS "Log flags: ${Log_compiler_flags}" ) 
    message( STATUS "" ) 
endif() 
message( STATUS "-----------------------------------------------------------" ) 
message( STATUS "" ) 

add_library( Log INTERFACE )
target_include_directories( Log INTERFACE src )
target_link_libraries( Log INTERFACE spdlog-adapter INTERFACE catch-adapter ) 

if( NOT DEFINED is_subproject ) 
    enable_testing() 
    add_subdirectory( src/Log/test ) 
endif() 
